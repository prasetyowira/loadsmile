// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch/lunchadapter/ent/ingredient"
	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch/lunchadapter/ent/recipe"
)

// RecipeCreate is the builder for creating a Recipe entity.
type RecipeCreate struct {
	config
	uid         *string
	title       *string
	created_at  *time.Time
	updated_at  *time.Time
	ingredients map[int]struct{}
}

// SetUID sets the uid field.
func (rc *RecipeCreate) SetUID(s string) *RecipeCreate {
	rc.uid = &s
	return rc
}

// SetTitle sets the title field.
func (rc *RecipeCreate) SetTitle(s string) *RecipeCreate {
	rc.title = &s
	return rc
}

// SetCreatedAt sets the created_at field.
func (rc *RecipeCreate) SetCreatedAt(t time.Time) *RecipeCreate {
	rc.created_at = &t
	return rc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rc *RecipeCreate) SetNillableCreatedAt(t *time.Time) *RecipeCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the updated_at field.
func (rc *RecipeCreate) SetUpdatedAt(t time.Time) *RecipeCreate {
	rc.updated_at = &t
	return rc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (rc *RecipeCreate) SetNillableUpdatedAt(t *time.Time) *RecipeCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// AddIngredientIDs adds the ingredients edge to Ingredient by ids.
func (rc *RecipeCreate) AddIngredientIDs(ids ...int) *RecipeCreate {
	if rc.ingredients == nil {
		rc.ingredients = make(map[int]struct{})
	}
	for i := range ids {
		rc.ingredients[ids[i]] = struct{}{}
	}
	return rc
}

// AddIngredients adds the ingredients edges to Ingredient.
func (rc *RecipeCreate) AddIngredients(i ...*Ingredient) *RecipeCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIngredientIDs(ids...)
}

// Save creates the Recipe in the database.
func (rc *RecipeCreate) Save(ctx context.Context) (*Recipe, error) {
	if rc.uid == nil {
		return nil, errors.New("ent: missing required field \"uid\"")
	}
	if err := recipe.UIDValidator(*rc.uid); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"uid\": %v", err)
	}
	if rc.title == nil {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if rc.created_at == nil {
		v := recipe.DefaultCreatedAt()
		rc.created_at = &v
	}
	if rc.updated_at == nil {
		v := recipe.DefaultUpdatedAt()
		rc.updated_at = &v
	}
	return rc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecipeCreate) SaveX(ctx context.Context) *Recipe {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RecipeCreate) sqlSave(ctx context.Context) (*Recipe, error) {
	var (
		r     = &Recipe{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recipe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recipe.FieldID,
			},
		}
	)
	if value := rc.uid; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: recipe.FieldUID,
		})
		r.UID = *value
	}
	if value := rc.title; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: recipe.FieldTitle,
		})
		r.Title = *value
	}
	if value := rc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: recipe.FieldCreatedAt,
		})
		r.CreatedAt = *value
	}
	if value := rc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: recipe.FieldUpdatedAt,
		})
		r.UpdatedAt = *value
	}
	if nodes := rc.ingredients; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}
