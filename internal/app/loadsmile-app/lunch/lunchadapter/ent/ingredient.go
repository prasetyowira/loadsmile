// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch/lunchadapter/ent/ingredient"
)

// Ingredient is the model entity for the Ingredient schema.
type Ingredient struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// BestBefore holds the value of the "best_before" field.
	BestBefore time.Time `json:"best_before,omitempty"`
	// UseBy holds the value of the "use_by" field.
	UseBy *time.Time `json:"use_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IngredientQuery when eager-loading is set.
	Edges IngredientEdges `json:"edges"`
}

// IngredientEdges holds the relations/edges for other nodes in the graph.
type IngredientEdges struct {
	// Recipes holds the value of the recipes edge.
	Recipes []*Recipe
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipesOrErr returns the Recipes value or an error if the edge
// was not loaded in eager-loading.
func (e IngredientEdges) RecipesOrErr() ([]*Recipe, error) {
	if e.loadedTypes[0] {
		return e.Recipes, nil
	}
	return nil, &NotLoadedError{edge: "recipes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ingredient) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // uid
		&sql.NullString{}, // title
		&sql.NullTime{},   // best_before
		&sql.NullTime{},   // use_by
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ingredient fields.
func (i *Ingredient) assignValues(values ...interface{}) error {
	if m, n := len(values), len(ingredient.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	i.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field uid", values[0])
	} else if value.Valid {
		i.UID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		i.Title = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field best_before", values[2])
	} else if value.Valid {
		i.BestBefore = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field use_by", values[3])
	} else if value.Valid {
		i.UseBy = new(time.Time)
		*i.UseBy = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		i.CreatedAt = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[5])
	} else if value.Valid {
		i.UpdatedAt = value.Time
	}
	return nil
}

// QueryRecipes queries the recipes edge of the Ingredient.
func (i *Ingredient) QueryRecipes() *RecipeQuery {
	return (&IngredientClient{i.config}).QueryRecipes(i)
}

// Update returns a builder for updating this Ingredient.
// Note that, you need to call Ingredient.Unwrap() before calling this method, if this Ingredient
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ingredient) Update() *IngredientUpdateOne {
	return (&IngredientClient{i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Ingredient) Unwrap() *Ingredient {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ingredient is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ingredient) String() string {
	var builder strings.Builder
	builder.WriteString("Ingredient(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", uid=")
	builder.WriteString(i.UID)
	builder.WriteString(", title=")
	builder.WriteString(i.Title)
	builder.WriteString(", best_before=")
	builder.WriteString(i.BestBefore.Format(time.ANSIC))
	if v := i.UseBy; v != nil {
		builder.WriteString(", use_by=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ingredients is a parsable slice of Ingredient.
type Ingredients []*Ingredient

func (i Ingredients) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
