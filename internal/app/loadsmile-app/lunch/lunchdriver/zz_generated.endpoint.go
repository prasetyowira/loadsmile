// +build !ignore_autogenerated

package lunchdriver

import (
	"context"
	"errors"

	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"

	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch"
	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch/lunchadapter/ent"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	ListRecipes		endpoint.Endpoint
	GetRecipe 		endpoint.Endpoint
	GetLunch		endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service lunch.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		ListRecipes:  	kitxendpoint.OperationNameMiddleware("lunch.ListRecipes")(mw(MakeListRecipesEndpoint(service))),
		GetRecipe:  	kitxendpoint.OperationNameMiddleware("lunch.GetRecipe")(mw(MakeGetRecipeEndpoint(service))),
		GetLunch:  		kitxendpoint.OperationNameMiddleware("lunch.GetLunch")(mw(MakeGetLunchEndpoint(service))),
	}
}

// ListRecipesRequest is a request struct for ListRecipes endpoint.
type ListRecipesRequest struct{
	Limit	string
	Offset	string
	Search 	string
}

// ListRecipesResponse is a response struct for ListRecipes endpoint.
type ListRecipesResponse struct {
	Recipes 	[]*ent.Recipe
	Err			error
}

func (r ListRecipesResponse) Failed() error {
	return r.Err
}

// MakeListRecipesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeListRecipesEndpoint(service lunch.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ListRecipesRequest)
		recipes, err := service.ListRecipes(ctx, req)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListRecipesResponse{
					Err:   err,
					Recipes: recipes,
				}, nil
			}

			return ListRecipesResponse{
				Err:   err,
				Recipes: recipes,
			}, err
		}

		return ListRecipesResponse{Recipes: recipes}, nil
	}
}

// GetRecipeRequest is a request struct for GetRecipe endpoint.
type GetRecipeRequest struct{
	Id string
}

// GetRecipeResponse is a response struct for GetRecipe endpoint.
type GetRecipeResponse struct {
	Recipe 		*ent.Recipe
	Err			error
}

func (r GetRecipeResponse) Failed() error {
	return r.Err
}

// MakeGetRecipeEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetRecipeEndpoint(service lunch.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetRecipeRequest)
		recipe, err := service.GetRecipe(ctx, req.Id)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return GetRecipeResponse{
					Err:   err,
					Recipe: recipe,
				}, nil
			}

			return GetRecipeResponse{
				Err:   err,
				Recipe: recipe,
			}, err
		}

		return GetRecipeResponse{Recipe: recipe}, nil
	}
}

// GetLunchRequest is a request struct for GetLunch endpoint.
type GetLunchRequest struct{}

// GetLunchResponse is a response struct for GetLunch endpoint.
type GetLunchResponse struct {
	Recipes 	[]*ent.Recipe
	Err			error
}

func (r GetLunchResponse) Failed() error {
	return r.Err
}

// MakeGetLunchEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetLunchEndpoint(service lunch.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		recipes, err := service.GetLunch(ctx)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListRecipesResponse{
					Err:   err,
					Recipes: recipes,
				}, nil
			}

			return ListRecipesResponse{
				Err:   err,
				Recipes: recipes,
			}, err
		}

		return ListRecipesResponse{Recipes: recipes}, nil
	}
}
