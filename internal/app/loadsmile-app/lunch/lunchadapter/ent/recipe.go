// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/prasetyowira/loadsmile/internal/app/loadsmile-app/lunch/lunchadapter/ent/recipe"
)

// Recipe is the model entity for the Recipe schema.
type Recipe struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipeQuery when eager-loading is set.
	Edges RecipeEdges `json:"edges"`
}

// RecipeEdges holds the relations/edges for other nodes in the graph.
type RecipeEdges struct {
	// Ingredients holds the value of the ingredients edge.
	Ingredients []*Ingredient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IngredientsOrErr returns the Ingredients value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) IngredientsOrErr() ([]*Ingredient, error) {
	if e.loadedTypes[0] {
		return e.Ingredients, nil
	}
	return nil, &NotLoadedError{edge: "ingredients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipe) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // uid
		&sql.NullString{}, // title
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipe fields.
func (r *Recipe) assignValues(values ...interface{}) error {
	if m, n := len(values), len(recipe.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field uid", values[0])
	} else if value.Valid {
		r.UID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		r.Title = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[2])
	} else if value.Valid {
		r.CreatedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[3])
	} else if value.Valid {
		r.UpdatedAt = value.Time
	}
	return nil
}

// QueryIngredients queries the ingredients edge of the Recipe.
func (r *Recipe) QueryIngredients() *IngredientQuery {
	return (&RecipeClient{config: r.config}).QueryIngredients(r)
}

// Update returns a builder for updating this Recipe.
// Note that, you need to call Recipe.Unwrap() before calling this method, if this Recipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipe) Update() *RecipeUpdateOne {
	return (&RecipeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Recipe) Unwrap() *Recipe {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipe is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipe) String() string {
	var builder strings.Builder
	builder.WriteString("Recipe(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", uid=")
	builder.WriteString(r.UID)
	builder.WriteString(", title=")
	builder.WriteString(r.Title)
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Recipes is a parsable slice of Recipe.
type Recipes []*Recipe

func (r Recipes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
